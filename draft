public class BaseRepo<T, I> {
    public static final EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("demo4");
    public static final EntityManager em = entityManagerFactory.createEntityManager();
    public void begin() {
        em.getTransaction().begin();
    }

    public void commit() {
        em.getTransaction().commit();
    }
    private final Class<T> persistenceClass;
    public BaseRepo() {
         this.persistenceClass = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0].getClass();
    }
    public void save(T t) {
        begin();
        em.persist(t);
        commit();
    }

    public void deleteById(I id) {
        begin();
        T t = em.find(persistenceClass, id);
        em.remove(t);
        commit();
    }

    public List<T> findAll() {
        return em.createQuery("from " + persistenceClass.getSimpleName(),  persistenceClass).getResultList();
    }
}